{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.73105858]\n",
      " [0.88079708]\n",
      " [0.26894142]\n",
      " [0.04742587]]\n",
      "[[0.19661193]\n",
      " [0.10499359]\n",
      " [0.19661193]\n",
      " [0.04517666]]\n"
     ]
    }
   ],
   "source": [
    "#Udai Nagpal, \n",
    "# -----------Part 5(iv)------------\n",
    "import numpy as np\n",
    "import math\n",
    "from numpy import linalg as LA\n",
    "\n",
    "#Element by element sigmoid of column vector\n",
    "def sigmoid(x):\n",
    "    output = np.zeros((x.shape[0], 1))\n",
    "    for i in range(x.shape[0]):\n",
    "        output[i,0] = 1.0/(1.0+math.exp(-x[i,0]))\n",
    "    return output\n",
    "\n",
    "#Scalar sigmoid\n",
    "def sigmoid_deriv_scalar(x):\n",
    "    sig_x = 1.0/(1.0+math.exp(-x))\n",
    "    return sig_x * (1-sig_x)\n",
    "\n",
    "def sigmoid_scalar(x):\n",
    "    return 1.0/(1.0+math.exp(-x))\n",
    "\n",
    "#Element by element sigmoid derivative of column vector\n",
    "def sigmoid_deriv(x):\n",
    "    output = np.zeros((x.shape[0],1))\n",
    "    for i in range(x.shape[0]):\n",
    "        temp_arr = np.zeros((1,1))\n",
    "        temp_arr[0][0] = x[i,0]\n",
    "        output[i,0] = sigmoid(temp_arr) * (1 - sigmoid(temp_arr))\n",
    "    return output\n",
    "y = np.array([[1],[2],[-1],[-3]])\n",
    "print(sigmoid(y))\n",
    "print(sigmoid_deriv(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stochastic_gradient_descent (input_data, output_data, inter_layer_sizes, convergence_cutoff=0.00001, max_iterations=50, minibatch_size=25, learning_rate=0.2):\n",
    "    layer_sizes = [len(input_data[0])] + inter_layer_sizes + [len(output_data[0])]\n",
    "    num_layers = len(layer_sizes)\n",
    "    #Random Initialization\n",
    "    W = [np.random.uniform(low=-2.0, high=2.0, size=(layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "    dW = [[np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)] for j in range(minibatch_size)]\n",
    "    b = [np.random.uniform(low=-2.0, high=2.0, size=(layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "    db = [[np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)] for j in range(minibatch_size)]\n",
    "    abs_adjustments_W = [100*np.ones((layer_sizes[i],layer_sizes[i+1])) for i in range(num_layers-1)]\n",
    "    abs_adjustments_b = [100*np.ones((layer_sizes[i+1],)) for i in range(len(layer_sizes)-1)]\n",
    "    #print('W:' + str(W))\n",
    "    #print('b:' + str(b))\n",
    "    elapsed_iterations = 0\n",
    "    max_adjustment_W, max_adjustment_b = 100, 100\n",
    "    while(elapsed_iterations<max_iterations and max_adjustment_W>=convergence_cutoff and max_adjustment_b>=convergence_cutoff):\n",
    "        stochastic_sample = np.random.choice(a=len(output_data),size=minibatch_size, replace=False)\n",
    "        sample_inputs = [input_data[i] for i in stochastic_sample]\n",
    "        sample_outputs = [output_data[i] for i in stochastic_sample]\n",
    "        dW_sum = [np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "        db_sum = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "        sample_predictions = []\n",
    "        running_cost = 0\n",
    "        for sample in range(len(sample_outputs)):\n",
    "            x = sample_inputs[sample]\n",
    "            y = sample_outputs[sample]\n",
    "            #print('sample input: ' + str(x))\n",
    "            #print('sample output: ' + str(y))\n",
    "            saved_forward_pass = [x]\n",
    "            layer_input = x\n",
    "            #Forward Pass\n",
    "            for layer in range(num_layers-1):\n",
    "                layer_output = np.add(np.dot(np.transpose(W[layer]), layer_input),b[layer])\n",
    "                out_dim = layer_output.shape[0]\n",
    "                layer_input = sigmoid(np.reshape(layer_output, (out_dim,1)))\n",
    "                layer_input = np.hstack(layer_input)\n",
    "                saved_forward_pass.append(layer_input)\n",
    "            sample_prediction = np.array(saved_forward_pass[-1:])\n",
    "            running_cost += LA.norm(np.subtract(sample_prediction, np.array(y)))**2.0\n",
    "            #BACKPROPAGATION\n",
    "            deltas = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "            for output_component in range(len(deltas[num_layers-2])):\n",
    "                deltas[num_layers-2][output_component] = -1.0 * (y[output_component]-saved_forward_pass[-1][output_component])*saved_forward_pass[-1][output_component]*(1-saved_forward_pass[-1][output_component])\n",
    "            #Backpropagating Deltas\n",
    "            for layer in range(num_layers-3, -1, -1):\n",
    "                for neuron_ind in range(len(saved_forward_pass[layer+1])):\n",
    "                    sigmoid_val = saved_forward_pass[layer+1][neuron_ind]\n",
    "                    partial_sigmoid = (sigmoid_val) * (1 - sigmoid_val)\n",
    "                    corr_weights = np.array(W[layer+1][neuron_ind,:])\n",
    "                    corr_deltas = np.array(deltas[layer+1])\n",
    "                    deltas[layer][neuron_ind] = partial_sigmoid * np.dot(corr_weights, corr_deltas)\n",
    "            #Computing gradient of cost function w.r.t. W and b\n",
    "            for layer in range(num_layers-1):\n",
    "                for j in range(len(saved_forward_pass[layer+1])):\n",
    "                    for i in range(len(saved_forward_pass[layer])):\n",
    "                        dW[sample][layer][i,j] = deltas[layer][j] * saved_forward_pass[layer][i]\n",
    "                    db[sample][layer][j] = deltas[layer][j]\n",
    "            for i in range(len(dW_sum)):\n",
    "                dW_sum[i] = np.add(dW_sum[i], dW[sample][i])\n",
    "            #print(dW[sample])\n",
    "            #dW_sum = np.add(dW_sum, dW[sample])\n",
    "            db_sum = np.add(db_sum,db[sample])\n",
    "            #print('deltas: ' + str(deltas))\n",
    "            #print('dW: ' + str(dW))\n",
    "            #print('db: ' + str(db))\n",
    "        print(\"Cost Function: \" + str(running_cost/(2.0*minibatch_size)))\n",
    "        #print('dW sum: ' + str(dW_sum))\n",
    "        db_avg = db_sum / minibatch_size\n",
    "        dW_avg = [dWi/minibatch_size for dWi in dW_sum]\n",
    "        #Updating Weight Parameters and Checking for Convergence\n",
    "        max_adjustment_W = 0\n",
    "        max_adjustment_b = 0\n",
    "        for layer in range(num_layers-1):\n",
    "            W[layer] = W[layer] - learning_rate * dW_avg[layer]\n",
    "            b[layer] = b[layer] - learning_rate * db_avg[layer]\n",
    "            adj_W = np.absolute(learning_rate * dW_avg[layer])\n",
    "            adj_b = np.absolute(learning_rate * db_avg[layer])\n",
    "            if (np.amax(adj_W) > max_adjustment_W):\n",
    "                max_adjustment_W = np.amax(adj_W)\n",
    "            if (np.amax(adj_b) > max_adjustment_b):\n",
    "                max_adjustment_b = np.amax(adj_b)\n",
    "        #print('Updated W: ' + str(W))\n",
    "        #print('Updated b: ' + str(b))\n",
    "        elapsed_iterations += 1\n",
    "        #print(elapsed_iterations)\n",
    "    #Final Output Predictions from Trained Model  \n",
    "    final_pred_outputs = []\n",
    "    for input_point in input_data:\n",
    "        forward_pass = [input_point]\n",
    "        layer_input = input_point\n",
    "        for layer in range(num_layers-1):\n",
    "            layer_output = np.add(np.dot(np.transpose(W[layer]), layer_input),b[layer])\n",
    "            #print(layer_output)\n",
    "            out_dim = layer_output.shape[0]\n",
    "            layer_input = sigmoid(np.reshape(layer_output, (out_dim,1)))\n",
    "            layer_input = np.hstack(layer_input)\n",
    "            forward_pass.append(layer_input)\n",
    "        #print(forward_pass)\n",
    "        final_pred_outputs.append(forward_pass[-1:])\n",
    "    final_pred_outputs = [output.tolist() for out_list in final_pred_outputs for output in out_list]\n",
    "    print(\"Final W: \" + str(W))\n",
    "    print(\"Final b: \" + str(b))\n",
    "    #print(\"Actual Outputs: \" + str(output_data))\n",
    "    #print(\"Predicted Outputs: \" + str(final_pred_outputs))\n",
    "    print(\"Total Elapsed Iterations: \" + str(elapsed_iterations))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost Function: 0.07596979565973572\n",
      "Cost Function: 0.07161246866868085\n",
      "Cost Function: 0.0638563735598339\n",
      "Cost Function: 0.07452103619383495\n",
      "Cost Function: 0.06872783611484146\n",
      "Cost Function: 0.06598663431643255\n",
      "Cost Function: 0.07150003213596266\n",
      "Cost Function: 0.06406329303206673\n",
      "Cost Function: 0.05881483273224248\n",
      "Cost Function: 0.05971981424075594\n",
      "Cost Function: 0.061956933189715485\n",
      "Cost Function: 0.05687901860424522\n",
      "Cost Function: 0.059762151995902506\n",
      "Cost Function: 0.05555485243128921\n",
      "Cost Function: 0.05723868796537282\n",
      "Cost Function: 0.05526236846481139\n",
      "Cost Function: 0.05709173998391883\n",
      "Cost Function: 0.04898437948131638\n",
      "Cost Function: 0.05390401135794689\n",
      "Cost Function: 0.05350927790778833\n",
      "Cost Function: 0.04788890137833634\n",
      "Cost Function: 0.047104053198132864\n",
      "Cost Function: 0.04325387373411611\n",
      "Cost Function: 0.04787389067686995\n",
      "Cost Function: 0.048527983831741714\n",
      "Cost Function: 0.051153145092108894\n",
      "Cost Function: 0.047629983525173544\n",
      "Cost Function: 0.04602641693749382\n",
      "Cost Function: 0.04526544030759028\n",
      "Cost Function: 0.04311216725431977\n",
      "Cost Function: 0.042104175288544356\n",
      "Cost Function: 0.038359870340618246\n",
      "Cost Function: 0.034602896404340486\n",
      "Cost Function: 0.030844698566495604\n",
      "Cost Function: 0.037050657266162926\n",
      "Cost Function: 0.04097616248174593\n",
      "Cost Function: 0.039303770598482134\n",
      "Cost Function: 0.0412734077073164\n",
      "Cost Function: 0.03715173721460056\n",
      "Cost Function: 0.034984381202169325\n",
      "Cost Function: 0.036337061761981204\n",
      "Cost Function: 0.035823092503661884\n",
      "Cost Function: 0.028593012049359517\n",
      "Cost Function: 0.033429850566630455\n",
      "Cost Function: 0.027328870449165644\n",
      "Cost Function: 0.03177691073126297\n",
      "Cost Function: 0.030153922113101982\n",
      "Cost Function: 0.027633269191988705\n",
      "Cost Function: 0.040205662236531305\n",
      "Cost Function: 0.03088225992478768\n",
      "Final W: [array([[-0.85306616, -0.87558271],\n",
      "       [ 1.82806383, -1.44668996]]), array([[ 0.81236843, -1.64742165],\n",
      "       [ 0.61242835,  0.7678823 ]]), array([[-1.1045416 , -1.93395312],\n",
      "       [-1.52733375,  1.90565424]])]\n",
      "Final b: [array([-0.4829635 , -1.96542389]), array([-1.19077663, -0.57512114]), array([0.64988297, 0.77569053])]\n",
      "Total Elapsed Iterations: 50\n"
     ]
    }
   ],
   "source": [
    "#TEST OF STOCHASTIC GRADIENT DESCENT: COST FUNCTION IS INDEED MINIMIZED\n",
    "my_input = [i.tolist() for i in np.random.uniform(size=(100,2))]\n",
    "#print(my_input)\n",
    "my_output = []\n",
    "for j in range(len(my_input)):\n",
    "    my_output.append([sigmoid_scalar(1*my_input[j][0] +2*my_input[j][1] - 1), sigmoid_scalar(1.2*my_input[j][0] +1.7*my_input[j][1] - 1.3)])\n",
    "my_output = np.array(my_output)\n",
    "#print(my_output)\n",
    "stochastic_gradient_descent(my_input, my_output, [2,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost Function: 0.0921519902383656\n",
      "Cost Function: 0.06972380184353762\n",
      "Cost Function: 0.07393973554741144\n",
      "Cost Function: 0.07768499830148336\n",
      "Cost Function: 0.07699349807600038\n",
      "Cost Function: 0.07469674788028825\n",
      "Cost Function: 0.08618411618370343\n",
      "Cost Function: 0.08256895360995137\n",
      "Cost Function: 0.08251197902822788\n",
      "Cost Function: 0.05302920295162518\n",
      "Cost Function: 0.039676674182014114\n",
      "Cost Function: 0.08243997252896854\n",
      "Cost Function: 0.0540464247202084\n",
      "Cost Function: 0.07372365165458926\n",
      "Cost Function: 0.07129546240148678\n",
      "Cost Function: 0.07692161557371133\n",
      "Cost Function: 0.04815704256150972\n",
      "Cost Function: 0.044000872285543245\n",
      "Cost Function: 0.06494551782185602\n",
      "Cost Function: 0.0437302672130728\n",
      "Cost Function: 0.039977200166502753\n",
      "Cost Function: 0.03236940313293362\n",
      "Cost Function: 0.05483107361645156\n",
      "Cost Function: 0.042475565735589436\n",
      "Cost Function: 0.027892655024739237\n",
      "Cost Function: 0.039482920029457365\n",
      "Cost Function: 0.05213495236360644\n",
      "Cost Function: 0.032877099248495016\n",
      "Cost Function: 0.024943987561735954\n",
      "Cost Function: 0.03288072597856991\n",
      "Cost Function: 0.04641794645458\n",
      "Cost Function: 0.026502371922422528\n",
      "Cost Function: 0.03405618080553971\n",
      "Cost Function: 0.042978670801909306\n",
      "Cost Function: 0.03438548099897471\n",
      "Cost Function: 0.03217662212648619\n",
      "Cost Function: 0.032406143729162576\n",
      "Cost Function: 0.047765479432504414\n",
      "Cost Function: 0.03377900534449383\n",
      "Cost Function: 0.02321397128777071\n",
      "Cost Function: 0.02489440737272024\n",
      "Cost Function: 0.028717420909304573\n",
      "Cost Function: 0.035237996856457315\n",
      "Cost Function: 0.03877911282361583\n",
      "Cost Function: 0.02614722379022399\n",
      "Cost Function: 0.02781188371095633\n",
      "Cost Function: 0.024063514793431436\n",
      "Cost Function: 0.039109111931505146\n",
      "Cost Function: 0.021303272605823556\n",
      "Cost Function: 0.025219541629837604\n",
      "Final W: [array([[0.91950782, 0.71151029],\n",
      "       [0.62360271, 0.53600228]]), array([[ 0.51351195, -0.5035491 ],\n",
      "       [ 1.21429357, -0.57022188]]), array([[1.02328855, 0.06543725],\n",
      "       [0.24463538, 0.2274746 ]])]\n",
      "Final b: [array([-0.29586911,  0.52458048]), array([0.61775981, 0.52416391]), array([-0.54242354, -0.50175121])]\n",
      "Total Elapsed Iterations: 50\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[0.6114737263954781, 0.4146820506282792],\n",
       " [0.6095301307856859, 0.41543785716790393],\n",
       " [0.610809100357292, 0.4149347448696997],\n",
       " [0.6113794453003132, 0.4147471887410024],\n",
       " [0.6109338491384803, 0.41492951296586844],\n",
       " [0.6110284666171305, 0.41485090865410046],\n",
       " [0.6106356013066424, 0.41503874639973853],\n",
       " [0.611628112062632, 0.41461344734306954],\n",
       " [0.6112025266129121, 0.41482090494265694],\n",
       " [0.6111531159997169, 0.4148204299657112],\n",
       " [0.6120871596806491, 0.4144147017959127],\n",
       " [0.6125485563511646, 0.41423682168082127],\n",
       " [0.6105644191926144, 0.41505203053795015],\n",
       " [0.6127206439728448, 0.4141693033328355],\n",
       " [0.6125603616951472, 0.4142419441934433],\n",
       " [0.6103476687410909, 0.41513643296381725],\n",
       " [0.6091468085610294, 0.415574526243988],\n",
       " [0.6113174527381378, 0.4147325910391071],\n",
       " [0.609532116698143, 0.415430887592693],\n",
       " [0.6102231835117481, 0.41516886508436557],\n",
       " [0.6111733764205675, 0.4148197922340345],\n",
       " [0.6127654975009368, 0.4141258094427866],\n",
       " [0.6105435834882232, 0.4150590649062059],\n",
       " [0.6117513439443044, 0.41456335194970345],\n",
       " [0.6090646820786814, 0.4155847534962664],\n",
       " [0.6107079904418178, 0.41499668819943125],\n",
       " [0.609869203221904, 0.4153023235068535],\n",
       " [0.6101963842951099, 0.41520077925236254],\n",
       " [0.6062728641410883, 0.4164691951534158],\n",
       " [0.6098640865762756, 0.4152948709404496],\n",
       " [0.6073775139036351, 0.4161362780555269],\n",
       " [0.6100344666132995, 0.41523423260779885],\n",
       " [0.6124235183559311, 0.4142922975164784],\n",
       " [0.6121088923158778, 0.41443373954166046],\n",
       " [0.6122751100974565, 0.4143658666817303],\n",
       " [0.6107125040507035, 0.41501402455468406],\n",
       " [0.6114501193801586, 0.41468776578367605],\n",
       " [0.6118246871461546, 0.4145292196462415],\n",
       " [0.6103785336993794, 0.4151159077441614],\n",
       " [0.608646661015501, 0.4157255166930445],\n",
       " [0.6101082589143547, 0.4152055583834443],\n",
       " [0.6121875398370272, 0.41438078053393473],\n",
       " [0.6120518873344628, 0.4144350658955114],\n",
       " [0.6107822601379005, 0.41496432309367143],\n",
       " [0.6130718306415817, 0.4139871615156338],\n",
       " [0.6094526751650295, 0.4154404905361788],\n",
       " [0.6115321722778545, 0.4146707345845183],\n",
       " [0.6124131809337184, 0.414285074023946],\n",
       " [0.6107560517937584, 0.4149910183883015],\n",
       " [0.6091308182809271, 0.4155816743847544],\n",
       " [0.6077158051756217, 0.4160277783614159],\n",
       " [0.6113991057142765, 0.4147006239410506],\n",
       " [0.613825239650942, 0.41363678794425446],\n",
       " [0.6087508062162271, 0.4156835656468752],\n",
       " [0.6090940024693962, 0.4156000825434147],\n",
       " [0.6118949385529686, 0.4144925389235173],\n",
       " [0.6117307573488167, 0.41460291102165464],\n",
       " [0.6123627305024099, 0.4143238156989521],\n",
       " [0.6091158252628711, 0.41557174370797384],\n",
       " [0.612033150725673, 0.414447174169467],\n",
       " [0.6110135062788156, 0.41489181731261926],\n",
       " [0.6071574800994514, 0.41621272239621754],\n",
       " [0.6085797430962844, 0.41576055829615],\n",
       " [0.6076458084050084, 0.41605452931827247],\n",
       " [0.6097020396763096, 0.41537628259841375],\n",
       " [0.6111402553720865, 0.41483142700798387],\n",
       " [0.6098373024694332, 0.4153005870309939],\n",
       " [0.6118284957122018, 0.4145500863513872],\n",
       " [0.6097348951273093, 0.415358257066177],\n",
       " [0.6127132114888663, 0.4141620869147642],\n",
       " [0.6064105790088835, 0.41642966701518763],\n",
       " [0.6104905053904711, 0.41506513589636407],\n",
       " [0.6108823338247176, 0.41493562535873435],\n",
       " [0.6120228675401781, 0.41446661124622153],\n",
       " [0.6105369958054596, 0.4150753095067839],\n",
       " [0.608589903428986, 0.41574426126280023],\n",
       " [0.613123475166487, 0.4139802062349212],\n",
       " [0.6130686134446045, 0.41400253023757433],\n",
       " [0.6119158886006767, 0.4145150842802014],\n",
       " [0.6117868749616796, 0.41456464861700254],\n",
       " [0.6078444215332802, 0.41599502025454804],\n",
       " [0.6090630141382605, 0.41560540044266114],\n",
       " [0.6102413387825446, 0.4151856628362479],\n",
       " [0.6134307545719139, 0.41382978923935126],\n",
       " [0.6101474152401867, 0.41520539693591374],\n",
       " [0.6109897401699683, 0.4148882640995633],\n",
       " [0.6121438042768788, 0.4144225720508929],\n",
       " [0.6105199062251234, 0.4150618182423945],\n",
       " [0.6107257104837751, 0.4150055464152004],\n",
       " [0.6109881524670173, 0.4148828147798222],\n",
       " [0.6072258198218681, 0.4161807053507189],\n",
       " [0.612742576464751, 0.41414197291723664],\n",
       " [0.6109186565347368, 0.4149114957732444],\n",
       " [0.6114972866836452, 0.4146928152494196],\n",
       " [0.609965284831102, 0.4152667137284679],\n",
       " [0.6064269329600148, 0.41641952128185566],\n",
       " [0.6142648630792602, 0.41341992046403897],\n",
       " [0.6117241096947836, 0.4145972278677178],\n",
       " [0.6114408776772112, 0.41468804988722197],\n",
       " [0.6136871023147357, 0.4137084138600345]]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def adam (input_data, output_data, inter_layer_sizes, convergence_cutoff=0.000001, max_iterations=3000, minibatch_size=100, learning_rate=0.0015):\n",
    "    beta_1 = 0.9\n",
    "    beta_2 = 0.999\n",
    "    epsilon = 10**(-8.0)\n",
    "    layer_sizes = [len(input_data[0])] + inter_layer_sizes + [len(output_data[0])]\n",
    "    num_layers = len(layer_sizes)\n",
    "    #Random Initialization\n",
    "    W = [np.random.uniform(low=-1.0, high=1.0, size=(layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "    dW = [[np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)] for j in range(minibatch_size)]\n",
    "    b = [np.random.uniform(low=-1.0, high=1.0, size=(layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "    db = [[np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)] for j in range(minibatch_size)]\n",
    "    m = [np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "    v = [np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "    m_b = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "    v_b = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "    abs_adjustments_W = [100*np.ones((layer_sizes[i],layer_sizes[i+1])) for i in range(num_layers-1)]\n",
    "    abs_adjustments_b = [100*np.ones((layer_sizes[i+1],)) for i in range(len(layer_sizes)-1)]\n",
    "    #print('W:' + str(W))\n",
    "    #print('b:' + str(b))\n",
    "    elapsed_iterations = 0\n",
    "    max_adjustment_W, max_adjustment_b = 100, 100\n",
    "    while(elapsed_iterations<max_iterations and max_adjustment_W>=convergence_cutoff and max_adjustment_b>=convergence_cutoff):\n",
    "        stochastic_sample = np.random.choice(a=len(output_data),size=minibatch_size, replace=False)\n",
    "        sample_inputs = [input_data[i] for i in stochastic_sample]\n",
    "        sample_outputs = [output_data[i] for i in stochastic_sample]\n",
    "        dW_sum = [np.zeros((layer_sizes[i],layer_sizes[i+1])) for i in range(len(layer_sizes)-1)]\n",
    "        db_sum = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "        sample_predictions = []\n",
    "        running_cost = 0\n",
    "        for sample in range(len(sample_outputs)):\n",
    "            x = sample_inputs[sample]\n",
    "            y = sample_outputs[sample]\n",
    "            #print('sample input: ' + str(x))\n",
    "            #print('sample output: ' + str(y))\n",
    "            saved_forward_pass = [x]\n",
    "            layer_input = x\n",
    "            #Forward Pass\n",
    "            for layer in range(num_layers-1):\n",
    "                layer_output = np.add(np.dot(np.transpose(W[layer]), layer_input),b[layer])\n",
    "                out_dim = layer_output.shape[0]\n",
    "                layer_input = sigmoid(np.reshape(layer_output, (out_dim,1)))\n",
    "                layer_input = np.hstack(layer_input)\n",
    "                saved_forward_pass.append(layer_input)\n",
    "            sample_prediction = np.array(saved_forward_pass[-1:])\n",
    "            running_cost += LA.norm(np.subtract(sample_prediction, np.array(y)))**2.0\n",
    "            #BACKPROPAGATION\n",
    "            deltas = [np.zeros((layer_sizes[i+1],)) for i in range(num_layers-1)]\n",
    "            for output_component in range(len(deltas[num_layers-2])):\n",
    "                deltas[num_layers-2][output_component] = -1.0 * (y[output_component]-saved_forward_pass[-1][output_component])*saved_forward_pass[-1][output_component]*(1-saved_forward_pass[-1][output_component])\n",
    "            #Backpropagating Deltas\n",
    "            for layer in range(num_layers-3, -1, -1):\n",
    "                for neuron_ind in range(len(saved_forward_pass[layer+1])):\n",
    "                    sigmoid_val = saved_forward_pass[layer+1][neuron_ind]\n",
    "                    partial_sigmoid = (sigmoid_val) * (1 - sigmoid_val)\n",
    "                    corr_weights = np.array(W[layer+1][neuron_ind,:])\n",
    "                    corr_deltas = np.array(deltas[layer+1])\n",
    "                    deltas[layer][neuron_ind] = partial_sigmoid * np.dot(corr_weights, corr_deltas)\n",
    "            #Computing gradient of cost function w.r.t. W and b\n",
    "            for layer in range(num_layers-1):\n",
    "                for j in range(len(saved_forward_pass[layer+1])):\n",
    "                    for i in range(len(saved_forward_pass[layer])):\n",
    "                        dW[sample][layer][i,j] = deltas[layer][j] * saved_forward_pass[layer][i]\n",
    "                    db[sample][layer][j] = deltas[layer][j]\n",
    "            for i in range(len(dW_sum)):\n",
    "                dW_sum[i] = np.add(dW_sum[i], dW[sample][i])\n",
    "            #print(dW[sample])\n",
    "            #dW_sum = np.add(dW_sum, dW[sample])\n",
    "            db_sum = np.add(db_sum,db[sample])\n",
    "            #print('deltas: ' + str(deltas))\n",
    "            #print('dW: ' + str(dW))\n",
    "            #print('db: ' + str(db))\n",
    "        print(\"Cost Function: \" + str(running_cost/(2.0*minibatch_size)))\n",
    "        #print('dW sum: ' + str(dW_sum))\n",
    "        db_avg = db_sum / minibatch_size\n",
    "        dW_avg = [dWi/minibatch_size for dWi in dW_sum]\n",
    "        #Updating Weight Parameters and Checking for Convergence\n",
    "        max_adjustment_W = 0\n",
    "        max_adjustment_b = 0\n",
    "        for layer in range(num_layers-1):\n",
    "            m[layer] = beta_1 * m[layer] + (1-beta_1)*dW_avg[layer]\n",
    "            v[layer] = beta_2 * v[layer] + (1-beta_2)*np.square(dW_avg[layer])\n",
    "            eps_matrix = epsilon * np.ones((np.shape(dW_avg[layer])[0], np.shape(dW_avg[layer])[1]))\n",
    "            W[layer] = W[layer] - learning_rate * np.divide(m[layer], np.add(np.sqrt(v[layer]), eps_matrix))\n",
    "            m_b[layer] = beta_1 * m_b[layer] + (1-beta_1)*db_avg[layer]\n",
    "            v_b[layer] = beta_2 * v_b[layer] + (1-beta_2)*np.square(db_avg[layer])\n",
    "            eps_matrix_b = epsilon * np.ones((np.shape(db_avg[layer])[0]))\n",
    "            b[layer] = b[layer] - learning_rate * np.divide(m_b[layer], np.add(np.sqrt(v_b[layer]), eps_matrix_b))\n",
    "            #b[layer] = b[layer] - learning_rate * db_avg[layer]\n",
    "            adj_W = np.absolute(learning_rate * np.divide(m[layer], np.add(np.sqrt(v[layer]), eps_matrix)))\n",
    "            adj_b = np.absolute(learning_rate * np.divide(m_b[layer], np.add(np.sqrt(v_b[layer]), eps_matrix_b)))\n",
    "            if (np.amax(adj_W) > max_adjustment_W):\n",
    "                max_adjustment_W = np.amax(adj_W)\n",
    "            if (np.amax(adj_b) > max_adjustment_b):\n",
    "                max_adjustment_b = np.amax(adj_b)\n",
    "        #print('Updated W: ' + str(W))\n",
    "        #print('Updated b: ' + str(b))\n",
    "        elapsed_iterations += 1\n",
    "        #print(elapsed_iterations)\n",
    "    #Final Output Predictions from Trained Model  \n",
    "    final_pred_outputs = []\n",
    "    for input_point in input_data:\n",
    "        forward_pass = [input_point]\n",
    "        layer_input = input_point\n",
    "        for layer in range(num_layers-1):\n",
    "            layer_output = np.add(np.dot(np.transpose(W[layer]), layer_input),b[layer])\n",
    "            #print(layer_output)\n",
    "            out_dim = layer_output.shape[0]\n",
    "            layer_input = sigmoid(np.reshape(layer_output, (out_dim,1)))\n",
    "            layer_input = np.hstack(layer_input)\n",
    "            forward_pass.append(layer_input)\n",
    "        #print(forward_pass)\n",
    "        final_pred_outputs.append(forward_pass[-1:])\n",
    "    final_pred_outputs = [output.tolist() for out_list in final_pred_outputs for output in out_list]\n",
    "    print(\"Final W: \" + str(W))\n",
    "    print(\"Final b: \" + str(b))\n",
    "    #print(\"Actual Outputs: \" + str(output_data))\n",
    "    #print(\"Predicted Outputs: \" + str(final_pred_outputs))\n",
    "    print(\"Total Elapsed Iterations: \" + str(elapsed_iterations))\n",
    "    return final_pred_outputs\n",
    "\n",
    "#Testing adam\n",
    "adam(input_data=my_input, output_data = my_output, inter_layer_sizes=[2,2],max_iterations=50, minibatch_size=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost Function: 0.11216364074386566\n",
      "Cost Function: 0.09929663998679333\n",
      "Cost Function: 0.08298649985010358\n",
      "Cost Function: 0.10202279012067829\n",
      "Cost Function: 0.06054810435694754\n",
      "Cost Function: 0.09547319040598697\n",
      "Cost Function: 0.07954230589375912\n",
      "Cost Function: 0.07456052834802566\n",
      "Cost Function: 0.06874013379503889\n",
      "Cost Function: 0.06948561852474636\n",
      "Final W: [array([[ 6.23416584e-01, -4.91676194e-01, -7.51533204e-01,\n",
      "         9.44512420e-01,  2.07870636e-01, -9.65905835e-01,\n",
      "        -9.62859188e-01,  1.98745371e-01,  4.99745175e-01,\n",
      "         4.64735587e-01, -8.83988476e-01, -9.11931840e-01,\n",
      "        -2.22648191e-01, -5.08862498e-01, -4.88941572e-01,\n",
      "         7.49986235e-01,  9.61204190e-03, -1.85409816e-01,\n",
      "         7.70788298e-01,  6.78207943e-01,  8.34525707e-01,\n",
      "        -6.59776410e-01,  7.46594385e-01, -3.97695223e-01,\n",
      "        -6.29716609e-01,  3.08086085e-03,  8.13318839e-01,\n",
      "         6.08787212e-02, -6.31696216e-01,  9.94036764e-01,\n",
      "        -4.02945864e-01, -5.08423266e-01,  4.63400757e-02,\n",
      "         6.14554399e-02, -3.77586144e-01, -7.09356400e-01,\n",
      "        -5.84967624e-01, -8.41505570e-01,  4.65318913e-01,\n",
      "        -5.55497685e-01,  8.80721854e-01,  9.79455493e-01,\n",
      "         5.91838262e-01,  2.47352238e-02,  9.85429365e-01,\n",
      "        -7.56599102e-01, -8.29948468e-01,  7.72318742e-02,\n",
      "         7.83020148e-01,  6.30243123e-01, -7.52496543e-03,\n",
      "         5.19959013e-01,  9.77455958e-01, -1.78420979e-01,\n",
      "        -9.61497425e-01, -5.30501693e-01, -5.10949700e-01,\n",
      "        -9.56710810e-01,  4.81102223e-01, -4.59153054e-01,\n",
      "        -1.36333052e-01,  3.05238484e-01,  2.78341268e-02,\n",
      "         3.03061247e-01,  7.05724332e-02, -5.76625089e-01,\n",
      "        -2.64255082e-01, -5.05106738e-01,  2.15115417e-01,\n",
      "         1.65170965e-01, -6.50207256e-02, -6.74558546e-01,\n",
      "        -7.90398356e-01, -3.16618153e-01,  9.85704842e-02,\n",
      "        -9.45483446e-01, -5.18693828e-01,  7.61567373e-01,\n",
      "        -6.09655625e-01,  3.59969392e-01, -5.77200696e-01,\n",
      "        -1.76604151e-02,  1.55819553e-01,  9.17295401e-02,\n",
      "         4.47906911e-01,  9.51539255e-01,  3.50514690e-01,\n",
      "         9.81612131e-01, -3.47499688e-01,  5.78154019e-01,\n",
      "        -1.70977270e-01,  7.80983679e-01,  8.46875454e-02,\n",
      "         3.46659222e-01,  7.05932907e-01, -8.73811873e-01,\n",
      "         4.38342964e-01, -5.90296115e-01,  8.51184554e-02,\n",
      "         7.43936256e-01,  2.67927179e-01, -9.62587911e-01,\n",
      "        -4.38249235e-01, -4.41747636e-01,  7.35291518e-01,\n",
      "        -5.63091190e-02,  9.48268198e-01,  5.43745106e-01,\n",
      "         2.98503499e-01,  8.80702219e-02,  7.86543324e-01,\n",
      "         7.87911286e-01, -9.39114036e-01, -6.39130238e-01,\n",
      "        -6.53260463e-01,  2.76688627e-02, -9.40174356e-01,\n",
      "        -5.72071494e-02,  1.77419011e-01, -2.86647582e-01,\n",
      "        -5.40747400e-01,  3.50550594e-01, -5.49315506e-01,\n",
      "        -6.04123275e-01,  6.36780984e-01,  5.73213874e-01,\n",
      "        -9.31603910e-01, -7.53580782e-01],\n",
      "       [-5.24291024e-01, -6.78176500e-01, -1.71287450e-01,\n",
      "         8.41987231e-01, -5.83782075e-01, -3.80519087e-01,\n",
      "         3.80329647e-01, -8.66389774e-01,  7.46392771e-01,\n",
      "         3.55330826e-01, -2.05715929e-01, -8.53316991e-01,\n",
      "        -3.44567516e-01, -5.62897674e-01,  2.03292633e-01,\n",
      "         6.28883029e-01, -2.35296610e-01,  5.09127956e-01,\n",
      "        -8.45541689e-01,  1.95162846e-01,  4.58608540e-02,\n",
      "         4.10556778e-02,  5.43074715e-04, -9.48450164e-01,\n",
      "         7.90571216e-01, -2.87519857e-01, -5.86460757e-01,\n",
      "         8.40263714e-03,  8.90524520e-01,  1.60859501e-01,\n",
      "        -2.86276472e-01, -8.97974968e-01,  8.95784753e-02,\n",
      "         2.49139540e-01, -7.26945285e-01,  9.24268113e-01,\n",
      "        -3.92367466e-01, -4.73024067e-01,  6.18828651e-01,\n",
      "        -4.69771373e-01, -3.98768545e-01,  9.63551461e-02,\n",
      "         9.11653188e-01, -4.41623491e-02, -2.88492008e-02,\n",
      "         3.88774830e-02,  4.18351702e-01,  1.49297454e-01,\n",
      "         1.91312427e-01, -1.66488122e-01, -9.49453656e-01,\n",
      "        -8.74962806e-01, -6.08494877e-01, -7.14323660e-01,\n",
      "        -1.58361862e-01, -2.58012185e-01,  9.29140022e-01,\n",
      "        -3.82438539e-01,  4.91083415e-01, -3.79526996e-01,\n",
      "        -1.25465272e-01, -3.46758377e-01,  8.24606110e-01,\n",
      "        -3.40267977e-01,  3.99168624e-01,  6.38099540e-01,\n",
      "        -8.56291333e-01, -8.65551459e-01, -6.10826948e-01,\n",
      "         4.55458928e-01, -8.76997150e-01, -8.89041960e-01,\n",
      "         5.20834233e-01,  5.07581188e-01, -3.75458233e-02,\n",
      "        -5.48263684e-02, -5.26573241e-01,  8.24359577e-01,\n",
      "        -8.38001160e-01, -3.32140737e-01,  2.80040253e-01,\n",
      "        -6.11290603e-01,  3.77894469e-01,  5.61110823e-01,\n",
      "         3.58962826e-02,  1.39184001e-01, -6.92759459e-01,\n",
      "        -6.87848310e-02,  9.32103411e-01, -8.09706290e-01,\n",
      "        -4.70175650e-01, -9.06578151e-01,  5.81144556e-01,\n",
      "        -6.98426643e-01,  8.35392588e-01, -6.60216918e-02,\n",
      "         4.20443881e-01, -8.15136703e-01, -2.40535800e-01,\n",
      "         7.76351926e-02,  2.69063843e-01,  8.61313957e-01,\n",
      "         1.56467140e-01,  7.88175621e-01,  2.42645415e-02,\n",
      "         7.39413322e-01,  1.73815634e-01,  6.88402519e-01,\n",
      "         4.79480872e-01,  9.47884871e-01, -9.29121936e-01,\n",
      "        -8.59168036e-01, -4.62883202e-01,  9.70008276e-01,\n",
      "        -7.84473721e-01,  6.47081052e-01,  4.51617532e-01,\n",
      "         7.58041525e-01, -4.56220955e-01, -8.06865043e-01,\n",
      "         2.13901399e-01,  3.90877549e-02,  7.90365269e-01,\n",
      "        -4.96089526e-03,  3.94663238e-01, -8.77930834e-02,\n",
      "        -1.68435688e-01,  8.67911969e-01]]), array([[ 0.82325255,  0.86135485,  0.55748569, ..., -0.79794818,\n",
      "         0.47290535, -0.80541957],\n",
      "       [-0.16329477, -0.88292589,  0.19169796, ...,  0.6567574 ,\n",
      "        -0.44230308,  0.72590728],\n",
      "       [ 0.24030661, -0.17618617, -0.18554588, ...,  0.93965785,\n",
      "         0.10613204, -0.03609279],\n",
      "       ...,\n",
      "       [-0.19440777,  0.36415526,  0.34415684, ..., -0.04652236,\n",
      "        -0.45068257, -0.31166042],\n",
      "       [-0.71058327, -0.83900778, -0.52350379, ..., -0.54309449,\n",
      "         0.41433286, -0.88046799],\n",
      "       [ 0.74379935, -0.85857854,  0.36487238, ...,  0.9704761 ,\n",
      "         0.02070899, -0.69403024]]), array([[ 0.06463949],\n",
      "       [ 0.22470641],\n",
      "       [-0.094168  ],\n",
      "       [-0.66693974],\n",
      "       [ 0.05210966],\n",
      "       [-0.27786004],\n",
      "       [-0.37995612],\n",
      "       [ 0.89554414],\n",
      "       [ 0.51697468],\n",
      "       [-0.54866602],\n",
      "       [-0.11785045],\n",
      "       [ 0.62175478],\n",
      "       [ 0.2800398 ],\n",
      "       [-0.25899302],\n",
      "       [ 0.84545168],\n",
      "       [-0.17987047],\n",
      "       [-0.40278812],\n",
      "       [-0.49942133],\n",
      "       [-0.60812141],\n",
      "       [ 0.33161533],\n",
      "       [-0.7251302 ],\n",
      "       [ 0.52004785],\n",
      "       [-0.3132875 ],\n",
      "       [-0.10689789],\n",
      "       [ 0.69036743],\n",
      "       [-0.47283936],\n",
      "       [-0.4248832 ],\n",
      "       [ 0.93440956],\n",
      "       [-0.90641201],\n",
      "       [ 0.63978174],\n",
      "       [ 0.22331596],\n",
      "       [ 0.85878884],\n",
      "       [-0.6815484 ],\n",
      "       [ 0.02446821],\n",
      "       [ 0.28452848],\n",
      "       [ 0.80270278],\n",
      "       [ 0.05238201],\n",
      "       [ 0.48121272],\n",
      "       [-0.86610853],\n",
      "       [-0.36481534],\n",
      "       [-0.03267592],\n",
      "       [ 0.06613366],\n",
      "       [ 0.31530668],\n",
      "       [-0.97384977],\n",
      "       [-0.62077626],\n",
      "       [ 0.44656925],\n",
      "       [ 0.08759689],\n",
      "       [ 0.36581418],\n",
      "       [ 0.91487478],\n",
      "       [-0.84387196],\n",
      "       [ 0.51130314],\n",
      "       [-0.79341966],\n",
      "       [ 0.01527608],\n",
      "       [-0.7588313 ],\n",
      "       [ 0.87678524],\n",
      "       [-0.9621433 ],\n",
      "       [ 0.39937193],\n",
      "       [ 0.23093693],\n",
      "       [ 0.94708095],\n",
      "       [-0.94877946],\n",
      "       [-0.012659  ],\n",
      "       [ 0.64509527],\n",
      "       [ 0.91273141],\n",
      "       [ 0.95818317],\n",
      "       [-0.77512591],\n",
      "       [-0.77499538],\n",
      "       [ 0.41986869],\n",
      "       [-0.01151088],\n",
      "       [ 0.80750157],\n",
      "       [-0.03142793],\n",
      "       [ 0.33508639],\n",
      "       [ 0.0696586 ],\n",
      "       [-0.39403161],\n",
      "       [ 0.99113043],\n",
      "       [-0.01529574],\n",
      "       [ 0.35717184],\n",
      "       [ 0.92376661],\n",
      "       [ 0.45950482],\n",
      "       [-0.70889503],\n",
      "       [-0.86042121],\n",
      "       [ 0.20706823],\n",
      "       [-0.32805778],\n",
      "       [-0.62799326],\n",
      "       [-0.94364727],\n",
      "       [-0.53768242],\n",
      "       [-0.7222506 ],\n",
      "       [-0.29206997],\n",
      "       [ 0.06347367],\n",
      "       [-0.30309409],\n",
      "       [ 0.985991  ],\n",
      "       [-0.05007988],\n",
      "       [ 0.02657101],\n",
      "       [ 0.73933863],\n",
      "       [-0.5485064 ],\n",
      "       [-0.24988584],\n",
      "       [ 0.38885776],\n",
      "       [-0.62969842],\n",
      "       [ 0.90715917],\n",
      "       [-0.33112874],\n",
      "       [-0.03355075],\n",
      "       [ 0.98256387],\n",
      "       [ 0.58836758],\n",
      "       [-0.49073214],\n",
      "       [-0.92497916],\n",
      "       [ 0.42106145],\n",
      "       [-0.34423734],\n",
      "       [-0.78200847],\n",
      "       [ 0.67941531],\n",
      "       [ 0.63392719],\n",
      "       [-0.50029136],\n",
      "       [-0.6114379 ],\n",
      "       [-0.60214794],\n",
      "       [ 0.24672572],\n",
      "       [-0.36564886],\n",
      "       [-0.26266371],\n",
      "       [-0.71811968],\n",
      "       [-0.49551978],\n",
      "       [ 0.7391948 ],\n",
      "       [-0.600264  ],\n",
      "       [-0.12923145],\n",
      "       [-0.62046636],\n",
      "       [-0.97161658],\n",
      "       [-0.93637443],\n",
      "       [ 0.78859475],\n",
      "       [ 0.10165752],\n",
      "       [-0.65704195],\n",
      "       [ 0.87340352],\n",
      "       [ 0.53021041],\n",
      "       [ 0.0939638 ],\n",
      "       [ 0.29019317],\n",
      "       [ 0.90607784],\n",
      "       [-0.20129141],\n",
      "       [ 0.10326269],\n",
      "       [ 0.24047867],\n",
      "       [ 0.47501463],\n",
      "       [ 0.67711697],\n",
      "       [-0.95812838],\n",
      "       [-0.85805766],\n",
      "       [-0.16595884],\n",
      "       [ 0.38570893],\n",
      "       [-0.87983142],\n",
      "       [ 0.74231691],\n",
      "       [-0.26331169],\n",
      "       [-0.7788985 ],\n",
      "       [ 0.06964635],\n",
      "       [ 0.41386293],\n",
      "       [ 0.80027066],\n",
      "       [ 0.68198275],\n",
      "       [-0.08367712],\n",
      "       [-0.50687564],\n",
      "       [-0.91688857],\n",
      "       [-0.65237159],\n",
      "       [ 0.95977031],\n",
      "       [-0.86428789],\n",
      "       [-0.38659017],\n",
      "       [-0.81816184],\n",
      "       [ 0.5415604 ],\n",
      "       [ 0.3605686 ],\n",
      "       [-0.73108588],\n",
      "       [ 0.62479154],\n",
      "       [-0.51305028],\n",
      "       [ 0.37658137],\n",
      "       [ 0.73689701],\n",
      "       [ 0.21684302],\n",
      "       [-0.71592999],\n",
      "       [ 0.49116416],\n",
      "       [-0.2788917 ],\n",
      "       [-0.81083517],\n",
      "       [ 0.87189945],\n",
      "       [ 0.11334081],\n",
      "       [-0.38588724],\n",
      "       [ 0.08937963],\n",
      "       [ 0.28120551],\n",
      "       [ 0.79583776],\n",
      "       [-0.98143123],\n",
      "       [ 0.3466215 ],\n",
      "       [-0.93054807],\n",
      "       [ 0.92877263],\n",
      "       [ 0.47546958],\n",
      "       [ 0.72479244],\n",
      "       [-0.21581445],\n",
      "       [-0.73293643],\n",
      "       [-0.04804247],\n",
      "       [-0.31599117],\n",
      "       [ 0.11808991],\n",
      "       [-0.08008839],\n",
      "       [-0.87528852],\n",
      "       [ 0.94420148],\n",
      "       [ 0.20106785],\n",
      "       [-0.74726335],\n",
      "       [ 0.10031117],\n",
      "       [ 0.78040484],\n",
      "       [-0.55695631],\n",
      "       [-0.97721782],\n",
      "       [ 0.19344218],\n",
      "       [-0.83716391],\n",
      "       [-0.95711421],\n",
      "       [ 0.73919794],\n",
      "       [-0.66782483],\n",
      "       [-0.18079426],\n",
      "       [-0.10569525],\n",
      "       [-0.00508663],\n",
      "       [-0.69848878],\n",
      "       [-0.38802573],\n",
      "       [-0.77413293],\n",
      "       [-0.45461724],\n",
      "       [-0.4016466 ],\n",
      "       [ 0.77420359],\n",
      "       [-0.89882824],\n",
      "       [-0.19550078],\n",
      "       [ 0.96903039],\n",
      "       [-0.52209828],\n",
      "       [-0.69556182],\n",
      "       [ 0.60016599],\n",
      "       [ 0.20351182],\n",
      "       [ 0.16650377],\n",
      "       [ 0.72381985],\n",
      "       [ 0.14853647],\n",
      "       [ 0.92036237],\n",
      "       [-0.40475866],\n",
      "       [ 0.86075912],\n",
      "       [-0.06126622],\n",
      "       [-0.52373898],\n",
      "       [-0.13557396],\n",
      "       [-0.9361939 ],\n",
      "       [-0.11777677],\n",
      "       [-0.58125027],\n",
      "       [-0.9286212 ],\n",
      "       [-0.34754568],\n",
      "       [-0.79381536],\n",
      "       [ 0.94066317],\n",
      "       [-0.70594655],\n",
      "       [ 0.97409481],\n",
      "       [ 0.34799478],\n",
      "       [ 0.96832625],\n",
      "       [ 0.71593012],\n",
      "       [ 0.51487348],\n",
      "       [ 0.53979258],\n",
      "       [-0.62925233],\n",
      "       [ 0.4534528 ],\n",
      "       [ 0.23549371],\n",
      "       [-0.31993857],\n",
      "       [-0.691326  ],\n",
      "       [-0.69028581],\n",
      "       [-0.57176373],\n",
      "       [ 0.67967357],\n",
      "       [-0.83016117],\n",
      "       [-0.51269563],\n",
      "       [ 0.62347347],\n",
      "       [-0.695685  ],\n",
      "       [-0.89573045],\n",
      "       [-0.38188248],\n",
      "       [-0.26726555],\n",
      "       [ 0.44991682],\n",
      "       [-0.21953626],\n",
      "       [-0.34805803]])]\n",
      "Final b: [array([ 7.74943393e-01,  2.49166370e-01, -7.87649592e-01,  4.43638227e-01,\n",
      "        1.91507972e-03,  9.18167925e-01, -7.70334219e-01, -4.98749915e-01,\n",
      "        6.85606326e-04, -1.49403494e-01,  4.95280766e-01, -7.44153775e-01,\n",
      "       -6.32079079e-01,  2.73384434e-02,  4.38217481e-02,  7.09199973e-01,\n",
      "        5.10466457e-01,  6.59793050e-01, -8.48881944e-01, -6.09884438e-01,\n",
      "        3.12119508e-01,  8.20235555e-01,  4.68335520e-01, -1.71753321e-01,\n",
      "       -3.25339811e-01,  1.52457930e-01,  3.08359739e-01, -7.25429200e-01,\n",
      "        6.77682216e-01,  2.78881009e-01,  4.65900447e-01,  2.31805430e-01,\n",
      "       -1.00940381e+00,  1.41382305e-01, -7.42129379e-01, -1.03302553e-01,\n",
      "       -1.17852686e-01,  9.16687664e-01,  2.14593781e-01, -5.83171308e-01,\n",
      "        2.18163861e-01, -6.70030849e-01,  7.64836520e-01, -5.08071995e-01,\n",
      "        9.01804639e-01, -1.43789716e-01,  9.94182346e-01,  1.43954711e-01,\n",
      "        7.60917014e-01, -2.69691817e-01, -2.60882050e-01,  9.55796781e-01,\n",
      "       -5.09824299e-01, -1.40508790e-01,  7.98802947e-01, -2.25412939e-01,\n",
      "       -8.83162317e-01,  7.19469843e-01,  3.61198866e-01,  9.12168663e-01,\n",
      "        9.57348288e-01, -6.58057263e-01, -2.84789008e-01,  4.60095453e-01,\n",
      "       -6.40521643e-01,  8.15297528e-01, -5.20562232e-01,  4.38440681e-01,\n",
      "        3.80155832e-01, -5.66981784e-01,  7.86791042e-01,  1.68298144e-01,\n",
      "        9.58994879e-01, -6.74580853e-01,  1.98482622e-01,  3.80464768e-01,\n",
      "        8.89643761e-01, -7.50598783e-01,  3.60714193e-01,  3.21856002e-01,\n",
      "        5.29173293e-01,  3.36011960e-01,  9.13987600e-01,  8.88633713e-01,\n",
      "       -3.28308985e-01,  9.61518715e-01,  3.17341955e-01, -5.27659065e-01,\n",
      "       -3.78782614e-01, -4.61203505e-01, -6.59555982e-01,  4.92514899e-01,\n",
      "       -1.92085589e-01,  3.79645344e-01, -8.37356094e-01,  4.18327491e-01,\n",
      "        6.89545741e-01,  9.67292355e-01, -1.09216510e-01, -8.17521593e-01,\n",
      "        9.37407505e-01, -4.59428169e-01,  6.23759626e-01,  2.19720536e-01,\n",
      "        2.97307624e-01, -5.20651806e-02, -2.37400208e-01,  9.75721576e-01,\n",
      "        3.55237836e-01, -6.36617405e-01, -7.08596082e-01, -7.19415444e-01,\n",
      "       -6.91244535e-01, -6.55706170e-01, -5.28952029e-01, -4.61630672e-01,\n",
      "        6.90003587e-01,  4.21852329e-01,  5.62269274e-01, -3.72674732e-01,\n",
      "        8.92284017e-01, -1.59576556e-01, -3.76820338e-02, -7.25435993e-01,\n",
      "       -8.64458770e-01, -3.11846433e-01, -6.14801404e-01, -3.03101410e-01]), array([-9.20663299e-01,  6.25599052e-02,  3.69205628e-01,  7.20332558e-01,\n",
      "        3.79015941e-01, -1.10859907e-01,  3.34697438e-01, -5.27555611e-01,\n",
      "        4.80014949e-01,  8.59675560e-01,  8.83291379e-02,  2.39596934e-01,\n",
      "        2.65911496e-01, -2.19202404e-01,  4.73459405e-01, -8.74758675e-01,\n",
      "        3.29222366e-01, -5.81991958e-01,  1.61404130e-01,  5.87513907e-02,\n",
      "       -1.26062682e-01, -8.92181294e-01, -4.52417844e-01, -1.12717107e-01,\n",
      "       -1.19819430e-01,  9.31633436e-01,  7.22349637e-01, -8.44806000e-01,\n",
      "        6.67942081e-01,  7.31710051e-01, -1.81472727e-01,  2.43118077e-01,\n",
      "       -8.15124485e-01, -5.75243081e-01,  4.28042439e-01, -8.92086140e-01,\n",
      "       -8.30488056e-01,  7.27930793e-01, -6.45434793e-01,  7.27848076e-01,\n",
      "        1.70519587e-01,  3.97425837e-03,  5.79943045e-01,  8.43947030e-01,\n",
      "       -5.72788725e-01,  2.39082479e-01, -7.03769633e-01, -9.09920204e-01,\n",
      "        7.93034788e-01,  4.60048310e-01,  4.89706369e-01,  6.62011262e-01,\n",
      "       -3.67950474e-01, -7.20412830e-01,  4.35972226e-03, -5.74708066e-01,\n",
      "        8.79071742e-01, -6.90132297e-01,  5.73512707e-02, -5.22980996e-01,\n",
      "       -8.72956799e-01,  3.78604086e-01,  5.19734505e-02, -3.01895133e-01,\n",
      "       -8.91576545e-01, -5.92582662e-01,  8.85881300e-01,  1.41696153e-01,\n",
      "       -2.69489821e-01,  4.31464566e-01,  7.25126469e-01,  3.35576678e-01,\n",
      "       -3.82238165e-01, -7.75345652e-01, -9.03115126e-01,  5.04569688e-01,\n",
      "        1.38531968e-01,  9.82625797e-01, -7.44424723e-03, -4.91651524e-01,\n",
      "       -1.21676576e-01,  2.47718355e-01, -6.25194269e-01, -2.17526233e-01,\n",
      "       -4.49638644e-01, -5.21992658e-01, -9.15874113e-01, -7.99764501e-01,\n",
      "       -8.26233392e-01, -2.16046422e-01,  9.61008449e-01, -7.10548043e-01,\n",
      "       -2.99803529e-01,  3.57555615e-02, -7.48794027e-01, -5.82481097e-01,\n",
      "       -9.06349474e-01, -5.46755702e-02,  2.50294054e-01, -3.03422299e-01,\n",
      "       -8.94989697e-01, -3.50273460e-01,  1.92777512e-04, -4.02615197e-01,\n",
      "       -5.85425426e-01, -2.07665032e-01,  9.59132617e-01, -3.37555652e-01,\n",
      "        2.25679695e-02, -3.48632246e-01,  2.99643524e-01, -1.27438471e-01,\n",
      "        8.98659355e-01,  6.93474644e-01,  7.50580503e-02, -6.68391411e-01,\n",
      "       -9.83941256e-01,  8.92188641e-01, -2.01007776e-01,  8.13881243e-01,\n",
      "       -8.32772121e-01,  2.08100623e-01,  8.04429548e-01,  9.24342333e-01,\n",
      "        6.47329947e-02,  8.25684398e-01, -2.81005348e-02,  3.76389145e-01,\n",
      "       -2.27808717e-01,  8.95762961e-01, -2.28418532e-01,  9.22058422e-01,\n",
      "       -6.68503337e-01, -1.14212857e-01,  3.04532448e-01,  7.76992274e-01,\n",
      "       -3.73081416e-01,  1.64695511e-01,  7.90428756e-01, -4.63364812e-01,\n",
      "        8.38646392e-01,  2.32605318e-01,  9.50459290e-01,  9.01966765e-01,\n",
      "       -9.57479590e-01,  2.13578823e-01, -2.46474514e-01,  4.79073286e-02,\n",
      "       -6.06521831e-02, -1.60755116e-02, -3.47360325e-01, -7.71414675e-01,\n",
      "       -7.14765357e-01, -4.43783480e-01,  2.77141833e-01,  3.42961169e-02,\n",
      "        4.47758339e-01,  1.21846495e-01,  1.31067721e-01, -3.43798170e-01,\n",
      "        8.61487321e-01, -8.46616276e-01,  4.71012277e-02, -1.20321479e-01,\n",
      "       -8.04301125e-01,  1.94744961e-01,  1.71302527e-01,  7.20486214e-01,\n",
      "       -1.82275344e-01,  8.29393168e-01,  4.41429569e-01, -8.75879746e-02,\n",
      "        8.88003383e-01,  9.57303328e-01,  7.88735530e-01,  2.89796747e-01,\n",
      "       -6.00305107e-01,  4.12696113e-01,  5.77259360e-01, -6.36041595e-01,\n",
      "        7.68047230e-01, -1.76366967e-01, -1.94316258e-02,  4.06654160e-01,\n",
      "        2.53062820e-01, -9.28701624e-01,  6.82693482e-01, -7.79129753e-01,\n",
      "       -4.23589352e-01, -5.02502500e-01,  8.92126228e-01, -8.31275275e-02,\n",
      "       -3.46026317e-01,  6.76872001e-01, -1.95863176e-02, -5.00710470e-01,\n",
      "        5.45017995e-01,  2.04538564e-01,  6.58076839e-01, -9.89352967e-01,\n",
      "       -5.01963376e-01,  3.99714643e-01,  5.54913652e-01,  3.16682027e-01,\n",
      "       -1.00963117e-01, -2.87312360e-01, -2.98052545e-01,  4.27426494e-01,\n",
      "        1.22664527e-01, -7.71864216e-01,  2.22323852e-01, -8.36372535e-01,\n",
      "       -5.04114216e-01,  4.02111002e-01,  3.65748929e-01, -7.20936809e-01,\n",
      "       -1.95473853e-01,  1.99163760e-01,  8.50288634e-01,  6.50116283e-01,\n",
      "        1.00160016e+00, -4.48160792e-01,  9.07551684e-01, -2.32304788e-01,\n",
      "        3.44232000e-01,  9.55171160e-01, -6.65069235e-01, -2.10550361e-01,\n",
      "        3.82967629e-01, -3.36374796e-01,  1.30442969e-01, -9.91970711e-01,\n",
      "       -2.48012306e-01,  5.32111541e-01, -1.16659039e-01,  5.11905533e-01,\n",
      "       -6.28751942e-01,  5.18352324e-01,  7.28369635e-01, -8.26868520e-01,\n",
      "        4.99297794e-01, -3.20647258e-01, -1.33019260e-01,  8.33303480e-02,\n",
      "        3.22195947e-01, -1.71203437e-01, -1.51810926e-02, -7.71993701e-01,\n",
      "        6.68307912e-01,  9.91653236e-01, -4.77547595e-01, -5.23161447e-01,\n",
      "        3.83429783e-01, -8.66476104e-01, -4.39064274e-01, -9.90896655e-01]), array([-0.36249463])]\n",
      "Total Elapsed Iterations: 10\n"
     ]
    }
   ],
   "source": [
    "#--------------PART 5(v)----------------\n",
    "#Gathering Data & Learning Lincoln Image\n",
    "%matplotlib inline\n",
    "from scipy.io import loadmat\n",
    "from matplotlib import pyplot\n",
    "x = loadmat('hw2_data.mat')\n",
    "X1 = x['X1']\n",
    "Y1 = x['Y1']\n",
    "X2 = x['X2']\n",
    "Y2 = x['Y2']\n",
    "img_2 = Y2.reshape(133, 140, 3)/np.amax(Y2)\n",
    "img_1 = Y1.reshape(100, 76) \n",
    "#pyplot.imshow(X=img_1, cmap='gray')\n",
    "#pyplot.imshow(X=img_2)\n",
    "Y1_norm = np.divide(Y1, np.amax(Y1))\n",
    "\n",
    "#Training Lincoln Model\n",
    "Y1_pred = adam(input_data = X1, output_data = Y1_norm, inter_layer_sizes=[128,256], max_iterations=10, minibatch_size=128, learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.57740587]\n",
      " [0.58577406]\n",
      " [0.60251045]\n",
      " ...\n",
      " [0.21757323]\n",
      " [0.19246861]\n",
      " [0.17573221]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0xb193b1668>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Showing Lincoln Results\n",
    "print(Y1_norm)\n",
    "#print(Y1_pred)\n",
    "#print(Y1_pred)\n",
    "pyplot.imshow(X=np.array(Y1_pred).reshape(100,76), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost Function: 0.4209847693995244\n",
      "Cost Function: 0.4141179929564651\n",
      "Cost Function: 0.4200134284834549\n",
      "Cost Function: 0.40675571135394367\n",
      "Cost Function: 0.391135038213046\n",
      "Cost Function: 0.38103518924481106\n",
      "Cost Function: 0.37152901865811466\n",
      "Cost Function: 0.3632435933440157\n",
      "Cost Function: 0.3486629966540807\n",
      "Cost Function: 0.3437197166212012\n",
      "Cost Function: 0.33709655167893515\n",
      "Cost Function: 0.3362748093963243\n",
      "Cost Function: 0.32722239238225004\n",
      "Cost Function: 0.31801631709120665\n",
      "Cost Function: 0.3095650861627316\n",
      "Cost Function: 0.2982965993282651\n",
      "Cost Function: 0.297454203198732\n",
      "Cost Function: 0.28027458511709674\n",
      "Cost Function: 0.270946719365975\n",
      "Cost Function: 0.2698771172905303\n",
      "Cost Function: 0.2622466649734821\n",
      "Cost Function: 0.2449035859368863\n",
      "Cost Function: 0.2405808062116375\n",
      "Cost Function: 0.2375950309308574\n",
      "Cost Function: 0.2348022394977204\n",
      "Cost Function: 0.22465754318647374\n",
      "Cost Function: 0.2254036147485808\n",
      "Cost Function: 0.21873315135439517\n",
      "Cost Function: 0.2169491680906623\n",
      "Cost Function: 0.2221612242127428\n",
      "Cost Function: 0.2248631830332628\n",
      "Cost Function: 0.22053562320689574\n",
      "Cost Function: 0.21685192678523527\n",
      "Cost Function: 0.21844968903880016\n",
      "Cost Function: 0.21529652236408064\n",
      "Cost Function: 0.21444549261838614\n",
      "Cost Function: 0.21881534561476207\n",
      "Cost Function: 0.2160188269230117\n",
      "Cost Function: 0.20722902588716813\n",
      "Cost Function: 0.2203568182272639\n",
      "Cost Function: 0.21495898519031004\n",
      "Cost Function: 0.2115843475639871\n",
      "Cost Function: 0.21747596258074464\n",
      "Cost Function: 0.21393352223442208\n",
      "Cost Function: 0.2106520393593759\n",
      "Cost Function: 0.21050208395919803\n",
      "Cost Function: 0.2086345113305295\n",
      "Cost Function: 0.2107523011593446\n",
      "Cost Function: 0.2055579431717864\n",
      "Cost Function: 0.20434624836748846\n",
      "Cost Function: 0.20464417690605954\n",
      "Cost Function: 0.20653159535270374\n",
      "Cost Function: 0.21119564793168616\n",
      "Cost Function: 0.2081635293257432\n",
      "Cost Function: 0.20941404077692294\n",
      "Cost Function: 0.2116785929736605\n",
      "Cost Function: 0.21072361455456626\n",
      "Cost Function: 0.204637583422875\n",
      "Cost Function: 0.2037020212327034\n",
      "Cost Function: 0.20777660577395488\n",
      "Cost Function: 0.200957041894879\n",
      "Cost Function: 0.20611153152478054\n",
      "Cost Function: 0.20029295342741166\n",
      "Cost Function: 0.20666542789056241\n",
      "Cost Function: 0.20085947927037728\n",
      "Cost Function: 0.2021560750377984\n",
      "Cost Function: 0.20715609424656536\n",
      "Cost Function: 0.19900019730128293\n",
      "Cost Function: 0.2010826970019912\n",
      "Cost Function: 0.20043132229002364\n",
      "Cost Function: 0.20585615761438328\n",
      "Cost Function: 0.20302827619526034\n",
      "Cost Function: 0.20309455270108473\n",
      "Cost Function: 0.19585415341089832\n",
      "Cost Function: 0.19903208125097313\n",
      "Cost Function: 0.2020498953817675\n",
      "Cost Function: 0.19864559009406396\n",
      "Cost Function: 0.20640297168977875\n",
      "Cost Function: 0.2003616304200404\n",
      "Cost Function: 0.20262474876284517\n",
      "Cost Function: 0.19703976234181786\n",
      "Cost Function: 0.19861938516989838\n",
      "Cost Function: 0.19851352042449405\n",
      "Cost Function: 0.20410738872679698\n",
      "Cost Function: 0.19900080432739004\n",
      "Cost Function: 0.19587027710547855\n",
      "Cost Function: 0.2030479440010772\n",
      "Cost Function: 0.19685030920911112\n",
      "Cost Function: 0.19809167642608377\n",
      "Cost Function: 0.19892431959902704\n",
      "Cost Function: 0.20117497144468424\n",
      "Cost Function: 0.1980471093273804\n",
      "Cost Function: 0.1969746685192247\n",
      "Cost Function: 0.19247560621759985\n",
      "Cost Function: 0.1952493464145399\n",
      "Cost Function: 0.19978377269242664\n",
      "Cost Function: 0.19803531731517782\n",
      "Cost Function: 0.1976567382635483\n",
      "Cost Function: 0.19430504708553034\n",
      "Cost Function: 0.19897543075549493\n",
      "Final W: [array([[-0.44566974,  1.02028083,  0.51494782, -0.81714002,  0.58603891,\n",
      "        -0.54718118,  0.0842963 ,  0.04781026, -0.8871975 , -0.19748635,\n",
      "         0.5983948 ,  0.15199109,  0.39811651,  0.93501472,  0.43409849,\n",
      "         0.30185145,  0.18120854, -0.75793511, -0.9266684 ,  0.1370219 ,\n",
      "        -0.19064593, -0.008427  , -0.17197103,  0.51049339,  0.42803488,\n",
      "        -0.11839876, -0.60726205,  0.98865081,  0.21360972, -0.66356567,\n",
      "        -0.43330419, -0.52813448],\n",
      "       [ 0.08867153, -0.06216909,  1.14467213,  0.59640273, -1.18103241,\n",
      "        -0.05078929, -0.53106815,  0.08084778,  0.3380174 , -0.04576639,\n",
      "         0.4255867 , -0.73226372, -0.44230755,  0.71970272, -0.06391574,\n",
      "        -0.33767401, -0.05182391,  0.09417528, -0.08885923, -0.73427358,\n",
      "         0.98006757, -0.09379493,  0.90887538,  0.64860929,  0.59568351,\n",
      "         0.64611754,  0.63168289,  1.00297571,  0.98555547,  0.35144075,\n",
      "        -0.10274654, -0.09453942]]), array([[ 0.69511442, -0.67489186, -0.17060406,  0.63512904, -0.71845803,\n",
      "         0.19828346,  0.38853522,  0.25041594, -0.90441655, -0.52987769,\n",
      "        -0.61526522, -1.29410805, -0.49696915, -1.23046671, -0.23966399,\n",
      "        -0.63138911],\n",
      "       [ 0.70075465, -0.12640659, -0.2276663 ,  0.64737808, -0.42351925,\n",
      "         0.12916288, -0.3125829 , -0.01653437, -0.82478089, -1.00050867,\n",
      "        -0.22414711, -0.53482277, -0.77526748,  0.14747477, -0.06035358,\n",
      "        -0.254148  ],\n",
      "       [-0.1413652 , -0.87382465, -0.26583949,  0.15411726,  0.48473319,\n",
      "        -0.45741165,  0.27648743, -0.53106216,  0.29859009, -0.41011598,\n",
      "        -0.50763287,  0.21288117, -0.71813791, -0.19196927, -0.00528687,\n",
      "        -0.79425861],\n",
      "       [-0.07557264,  0.23689229, -0.56214898,  0.6990568 ,  0.51722234,\n",
      "         0.69816616,  0.08494951, -0.1196463 , -0.31179041,  0.59450554,\n",
      "         0.64031542, -0.01777499, -0.26178166, -0.72552575,  0.67636892,\n",
      "         0.02820509],\n",
      "       [-0.01332366, -0.17548637,  0.21781457, -0.06647139,  0.11805123,\n",
      "        -0.77597205, -0.7175423 ,  0.56235817, -0.98239334, -0.06935572,\n",
      "        -0.73646733, -0.43411161,  0.18682708, -0.58575233, -0.39000031,\n",
      "        -0.07417643],\n",
      "       [-0.84049719, -0.60152749,  0.23496334,  0.33793814,  0.59326512,\n",
      "        -0.8710938 ,  0.28434116, -0.10944523,  0.13551966,  0.64650341,\n",
      "        -0.03118092, -0.98535738,  0.52078315, -1.11014365, -0.13223845,\n",
      "        -0.25554631],\n",
      "       [-0.40033462,  0.02227056,  0.50712269, -0.49904411, -0.0322023 ,\n",
      "        -0.51322423, -0.25647421,  0.86514998, -1.22943741, -0.8044572 ,\n",
      "         0.52260417, -0.72536865,  0.64136741, -0.33537243,  0.10189782,\n",
      "        -0.06236619],\n",
      "       [-0.20417356,  0.9710856 ,  0.32598636,  0.13966912,  0.6018377 ,\n",
      "        -0.73116666, -0.26908355,  0.55618552, -0.27860353,  0.91070842,\n",
      "        -0.18438988,  0.14402781, -0.05591803,  0.92821692, -0.73819646,\n",
      "         0.4519481 ],\n",
      "       [ 0.04705618,  0.8184086 ,  0.69829402,  0.25474757, -0.20938252,\n",
      "         0.16445813, -0.72734015,  0.29245257, -0.25298287,  0.12757961,\n",
      "         0.07084515,  0.07233723, -0.2361888 , -0.37637961,  1.08913196,\n",
      "        -0.02957138],\n",
      "       [-0.94405505,  0.40843093,  0.6301742 , -0.5492136 , -0.26826445,\n",
      "         0.55193641, -0.70245296,  0.61862891,  0.41213595,  0.79472749,\n",
      "         0.23513072, -0.39273365,  0.37866425, -0.62459742,  0.15469273,\n",
      "        -0.28661689],\n",
      "       [ 0.92478277, -0.00710178, -0.23450011,  0.2110059 , -0.14313873,\n",
      "        -0.82806729,  0.73503397, -0.55621749, -0.21258156, -0.69246691,\n",
      "         0.527511  , -0.4087119 , -0.3173678 , -0.1236524 , -0.6088086 ,\n",
      "        -1.15140138],\n",
      "       [-0.52982646, -0.24174841,  0.15107821, -0.60818051, -0.66959979,\n",
      "         0.26889263,  0.19001975,  0.45750096, -0.60823373, -0.18689155,\n",
      "        -0.17477168,  0.15763125,  0.47580551, -1.03317461, -0.35912015,\n",
      "        -0.54975411],\n",
      "       [-0.32411265,  0.44577484, -0.95654691, -1.01791816,  1.11955455,\n",
      "         0.37178447,  0.45291102,  0.15690658, -0.07131721, -0.94330472,\n",
      "         0.95924829, -0.1880317 , -0.78043812,  0.02414539,  0.65092289,\n",
      "         0.54965802],\n",
      "       [-0.41321717,  0.49250245, -0.85133714,  0.48252803, -0.5210342 ,\n",
      "        -0.87569117,  0.90679028,  0.84048512, -0.76364985,  0.47684538,\n",
      "        -0.27736655, -0.20001999, -0.03310104,  0.61831912,  0.11741316,\n",
      "        -0.67989577],\n",
      "       [-0.89755688,  0.76670023, -0.2095544 ,  0.33416728, -0.43355898,\n",
      "        -1.08085821,  0.0391238 ,  0.49405875, -0.13568773, -0.57261892,\n",
      "        -0.25570041, -0.16683093, -0.71345985, -0.83187997,  0.21204107,\n",
      "         0.79156942],\n",
      "       [-0.1646124 , -0.40338528,  0.01823072, -0.78261416,  0.78116136,\n",
      "         0.53477608,  0.64820592, -0.67861185,  0.44474895,  0.52357232,\n",
      "         0.52357619,  0.05784331, -0.2866552 ,  0.79226982,  0.46907064,\n",
      "        -0.39380279],\n",
      "       [-0.88065834,  0.66744133, -0.01681769, -0.10181335, -0.95267946,\n",
      "         0.40042846,  0.23529646, -0.72998628, -0.67451034, -0.51174966,\n",
      "         0.38578063, -0.4708252 ,  0.88182525,  0.82913818,  0.38293571,\n",
      "        -0.53903527],\n",
      "       [-0.58370337, -0.72019969,  0.65871298, -1.24089572,  0.4402757 ,\n",
      "         0.88983826,  0.02089972, -0.86651792,  0.11226624, -0.83591693,\n",
      "        -0.99826879,  0.08291346, -0.04278654, -0.12537465, -0.84076701,\n",
      "         0.59544398],\n",
      "       [ 0.70933571, -0.30294501, -0.23724495,  0.60213978, -0.905646  ,\n",
      "        -0.98816829, -0.13005904,  0.58616122, -0.26872536, -0.17404499,\n",
      "        -0.55249975, -0.9529038 ,  0.19142991,  0.13792756, -0.70656471,\n",
      "         0.13661013],\n",
      "       [ 0.1647899 ,  0.29207509,  1.14101424, -0.41444524, -0.74819123,\n",
      "        -0.62104845,  0.02417594,  0.52998615,  0.36089062, -1.4638134 ,\n",
      "         0.40710359, -0.56323874,  0.22852265, -1.14884488,  0.47455507,\n",
      "         0.52220837],\n",
      "       [-0.27281016, -0.6564009 ,  0.22130824,  0.05257361,  0.97406095,\n",
      "         0.05080483,  0.31941363,  0.8321759 ,  0.3400538 , -0.21015522,\n",
      "         0.24564436,  0.23902093,  0.51131597,  0.61737969,  0.67137664,\n",
      "         0.42882122],\n",
      "       [ 0.88039199, -0.18653357,  0.4590686 , -0.31718232, -1.24468491,\n",
      "        -0.808686  , -0.47032319,  0.32510212, -0.54592956,  0.51898422,\n",
      "        -0.32996645,  0.41423268, -0.60733186, -0.06284248, -0.22533724,\n",
      "        -0.64599268],\n",
      "       [-0.45303375, -0.0410448 , -0.30150574,  0.54905908,  0.40087225,\n",
      "        -0.33395575, -0.33146784, -0.3890106 , -0.45255544, -0.12282744,\n",
      "         0.27305579,  0.31879134,  0.30092259,  0.00986424,  0.04829488,\n",
      "         0.65218461],\n",
      "       [-0.69463152,  0.138323  , -0.34932889, -0.8677636 ,  0.46559227,\n",
      "         0.68360795,  0.22287858,  0.72352237,  0.41153966,  0.55305439,\n",
      "         0.42919693, -0.99748785, -0.2209907 , -0.58192784,  0.00905113,\n",
      "        -0.26713403],\n",
      "       [-0.70067745,  0.49003136,  0.50261963, -0.16380443, -0.79713863,\n",
      "        -0.23379443,  0.66143105,  0.82500548, -0.0769285 , -0.77307711,\n",
      "         0.5099613 , -0.81395389,  0.37305752, -0.19684612, -0.07861865,\n",
      "        -0.53390636],\n",
      "       [-0.28002811,  0.39251549, -0.28448652,  0.07204591,  0.68905043,\n",
      "        -0.32186649,  0.62205607,  0.87410472,  0.74888622,  0.44017119,\n",
      "         0.41654224, -0.78188356, -0.42328541,  0.38462451, -0.0619631 ,\n",
      "        -0.02083313],\n",
      "       [-0.63423863, -0.78230948, -0.13053457,  0.28890703,  0.911685  ,\n",
      "        -0.62921377,  0.58231665, -0.38002047, -0.0698356 , -1.01892907,\n",
      "        -0.40411364,  0.47756771,  0.17475481, -1.04512879,  0.75754647,\n",
      "         0.11043854],\n",
      "       [-0.79660548, -0.87749355, -0.48580007, -0.96862382, -0.21344726,\n",
      "         0.89977055, -0.31496122, -0.11979662, -0.45968617,  0.27354847,\n",
      "        -0.54098803, -0.89010231, -0.65409596, -0.79519422, -0.28948117,\n",
      "        -1.06756484],\n",
      "       [ 0.36636729,  0.55283863,  0.45435646, -0.66445702, -0.8525294 ,\n",
      "        -1.04523527,  0.81134402, -0.18971695,  0.55441938,  0.32165214,\n",
      "         0.67311552, -0.4943406 ,  0.32425422, -0.94551863, -0.32244684,\n",
      "        -0.32546262],\n",
      "       [ 0.55553845, -0.7368328 ,  0.34497764,  0.02839865, -0.24101633,\n",
      "        -0.4125824 , -0.23705298, -0.85765698, -0.17967915, -0.26763124,\n",
      "         0.36542957, -0.768447  , -0.32977209, -0.16967813, -0.6712037 ,\n",
      "        -0.14426872],\n",
      "       [ 0.98255819,  0.5929884 ,  1.1630985 , -0.59339958,  0.4159384 ,\n",
      "        -0.55558414,  0.64103874,  1.0451488 , -1.04985609,  0.39047779,\n",
      "        -0.88132979, -0.67266365, -0.1464388 ,  0.46097921,  0.33004358,\n",
      "        -0.00223797],\n",
      "       [ 0.47006932, -0.73271035,  0.57035052, -0.59425574, -1.17133952,\n",
      "        -0.17666726,  0.75818922,  0.87428901, -1.21054444,  0.07826761,\n",
      "         0.54736953, -0.80461424,  0.57824866,  0.5049175 ,  0.15811938,\n",
      "         0.19595067]]), array([[-0.87660963,  0.76688045, -0.17307491],\n",
      "       [ 0.30157303, -0.86648902,  0.45792092],\n",
      "       [ 0.51718645, -1.01718998, -0.65130502],\n",
      "       [ 0.3349302 , -0.23640091, -0.77171794],\n",
      "       [ 0.20596795,  0.06564378,  1.04594576],\n",
      "       [-0.04701225,  0.43786735, -0.4669759 ],\n",
      "       [-0.93415998, -0.96270089, -0.79112499],\n",
      "       [-0.10996059, -0.82440392, -0.32470866],\n",
      "       [ 0.76010487,  0.62436927,  0.40814036],\n",
      "       [ 0.13166617,  0.70671344,  0.86808417],\n",
      "       [ 0.03222205,  0.59628741, -0.82738922],\n",
      "       [ 0.33961916,  0.64471725,  0.62377064],\n",
      "       [-0.66762358,  0.34993372,  0.52603188],\n",
      "       [ 0.33306824,  0.76164526,  0.05255786],\n",
      "       [-0.79604079,  0.66729379,  0.23371322],\n",
      "       [ 0.66610167,  0.55649123,  0.1949931 ]])]\n",
      "Final b: [array([-0.65659376,  0.28112883,  0.02895871, -0.30786583, -0.36687827,\n",
      "       -0.82486528,  1.29643527,  0.5609299 ,  0.63012718, -0.37170056,\n",
      "        0.93640783, -0.55177489, -0.76020353, -0.28020431,  0.70378502,\n",
      "        0.49913618, -0.22194788, -0.36593632,  0.84378829,  0.93591528,\n",
      "        0.45930892,  0.03800693, -1.18068864, -0.73808269, -0.31035719,\n",
      "       -0.74421282, -1.07055475, -0.72072684,  0.94225305, -0.18444963,\n",
      "        0.91153314,  1.12243309]), array([ 1.00452329,  0.44893232,  0.54528838, -0.91420808, -0.24567514,\n",
      "       -0.33760578,  0.58162393,  0.85717603, -0.4479958 , -0.27328546,\n",
      "        0.56224139, -0.106077  ,  0.5077041 ,  0.78111975,  0.72141646,\n",
      "        0.41984672]), array([0.60249664, 0.7499034 , 0.30245543])]\n",
      "Total Elapsed Iterations: 100\n"
     ]
    }
   ],
   "source": [
    "#Training Flower Model\n",
    "img_2 = Y2.reshape(133, 140, 3)/np.amax(Y2)\n",
    "Y2_norm = np.divide(Y2, np.amax(Y2))\n",
    "Y2_pred = adam(input_data=X2, output_data=Y2_norm, inter_layer_sizes=[32,16], max_iterations=100, minibatch_size=1024, learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Showing Flower Results\n",
    "pyplot.imshow(X=np.array(Y2_pred).reshape(133,140,3)/np.amax(Y2_pred))\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
